访问者模式基本介绍 。扩展类的属性
1) 访问者模式(Visitor Pattern)，封装一些作用于某种数据结构的各元素的操作，
 它可以在不改变数据结构的前提下新增作用于这些元素的新的操作。
2) 主要将数据结构与数据操作分离，解决 """"数据结构和操作耦合性问题""""
3) 访问者模式的基本工作原理是:在"""被访问的类"""里面加一个接收该""访问者""方法，并将自身作为参数，以供访问者类自身的操作
4) 访问者模式主要应用场景是:需要对一个对象结构中的对象进行很多不同操作
(这些操作彼此没有关联)，同时需要避免让这些操作"污染"这些对象的类，
可以 选用访问者模式解决



对原理类图的说明-
即(访问者模式的角色及职责)
1) Visitor 是抽象访问者，为该对象结构中的ConcreteElement的每一个类声明一个visit操作
2) ConcreteVisitor :是一个具体的访问值 实现每个有Visitor 声明的操作，是每个操作实现的部分.
3) ObjectStructure 能枚举访问者的类， 可以提供一个高层的接口，用来允许访问者访问元素
4) Element 定义一个accept 方法，接收一个访问者对象
5) ConcreteElement 为具体元素，实现了accept 方法


4) 应用案例的小结
-上面提到了双分派，所谓双分派是指不管类怎么变化，我们都能找到期望的方法运行。
双分派意味着得到执行的操作取决于请求的种类和两个接收者的类型
- 以上述实例为例，假设我们要添加一个Wait的状态类，考察Man类和Woman类的反 应，
由于使用了双分派，只需增加一个Action子类即可在客户端调用即可，不 需要改动任何其他类的代码。


访问者模式的注意事项和细节 访问者模式的注意事项和细节
优点
1) 访问者模式符合单一职责原则、让程序具有优秀的扩展性、灵活性非常高
2) 访问者模式可以对功能进行统一，可以做报表、UI、拦截器与过滤器，适用于数据
结构相对稳定的系统
缺点
1) 具体元素对访问者公布细节，也就是说访问者关注了其他类的内部细节，这是迪米
特法则所不建议的, 这样造成了具体元素变更比较困难
2) 违背了依赖倒转原则。访问者依赖的是具体元素，而不是抽象元素
3) 因此，如果一个系统有比较稳定的数据结构，又有经常变化的功能需求，那么访问
者模式就是比较合适的.


什么叫做访问，如果大家学过数据结构，对于这点就很清晰了，遍历就是访问的一般形式，单独读取一个元素进行相应的处理也叫作访问，读取到想要查看的内容+对其进行处理就叫做访问，那么我们平常是怎么访问的，基本上就是直接拿着需要访问的地址（引用）来读写内存就可以了。

   为什么还要有一个访问者模式呢，这就要放到OOP之中了，在面向对象编程的思想中，我们使用类来组织属性，以及对属性的操作，那么我们理所当然的将访问操作放到了类的内部，这样看起来没问题，但是当我们想要使用另一种遍历方式要怎么办呢，我们必须将这个类进行修改，这在设计模式中是大忌，在设计模式中就要保证，对扩展开放，对修改关闭的开闭原则。

   因此，我们思考，可不可以将访问操作独立出来变成一个新的类，当我们需要增加访问操作的时候，直接增加新的类，原来的代码不需要任何的改变，如果可以这样做，那么我们的程序就是好的程序，因为可以扩展，符合开闭原则。而访问者模式就是实现这个的，使得使用不同的访问方式都可以对某些元素进行访问。