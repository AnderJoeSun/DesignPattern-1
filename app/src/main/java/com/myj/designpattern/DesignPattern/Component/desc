组合模式：需要遍历组合结构或者处理的对象具有树形机构。
但如果节点和叶子节点有很多的差异性的话，比如很多方法不一致，不适合使用组合模式
整体与部分（都继承一个抽象类或接口）：客户端只需要面对一致的对象

1) 组合模式解决这样的问题，当我们的要处理的对象可以生成一颗树形结构，
而 我们要对树上的节点和叶子进行操作时，它能够提供一致的方式，
而不用考虑 它是节点还是叶子

组合模式在JDK集合的源码分析
1) Java的集合类-HashMap就使用了组合模式
2) 代码分析+Debug 源码
    Map AbstractHashMap HashMap及里面的静态内部类Node
    Map AbstractHashMap 是Component
    HashMap 是节点
    Node 是叶子节点。

组合模式的注意事项和细节
1) 简化客户端操作。客户端只需要面对一致的对象而不用考虑整体部分或者节点叶子 的问题。
2) 具有较强的扩展性。当我们要更改组合对象时，我们只需要调整内部的层次关系， 客户端不用做出任何改动.
3) 方便创建出复杂的层次结构。客户端不用理会组合里面的组成细节，容易添加节点 或者叶子从而创建出复杂的树形结构
4) 需要遍历组织机构，或者处理的对象具有树形结构时, 非常适合使用组合模式.
5) 要求较高的抽象性，如果节点和叶子有很多差异性的话，比如很多方法和属性 都不一样，不适合使用组合模式