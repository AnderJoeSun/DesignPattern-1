桥接模式：（可以满足类最小原则）。Abstraction作为一个桥梁，沟通着两个对象。
桥接模式"替代多层继承方案。比如本例的手机设计，即减少例一层继承

传统方案解决手机操作问题分析
1) 扩展性问题(类爆炸)，如果我们再增加手机的样式(旋转式)，
就需要增加各个品 牌手机的类，同样如果我们增加一个手机品牌，也要在各个手机样式类下增加。
2) 违反了单一职责原则，当我们增加手机样式时，要同时增加所有品牌的手机，这
样增加了代码维护成本.
3) 解决方案-使用桥接模式

桥接模式(Bridge)-基本介绍
1) 桥接模式(Bridge模式)是指:将实现与抽象放在两个不同的类层次中，使两个层 次可以独立改变。
2) 是一种结构型设计模式
3) Bridge模式基于类的最小设计原则，通过使用封装、聚合及继承等行为让不同
的类承担不同的职责。它的主要特点是把抽象(Abstraction)与行为实现 (Implementation)分离开来，
从而可以保持各部分的独立性以及应对他们的功能扩展。

4中角色介绍：抽象类和接口，将接口聚合到抽象类中
1) Client 类:桥接模式的调用者
2) 抽象类(Abstraction) :维护了 Implementor / 即它的实现类 ConcreteImplementorA.., 二者是聚合关系, Abstraction充当桥接类
3) RefinedAbstraction : 是 Abstraction 抽象类的子类
4) Implementor : 行为实现类的接口
5) ConcreteImplementorA /B :行为的具体实现类
6) 从UML图:这里的抽象类和接口是聚合的关系，其实调用和被调用关系


桥接模式在JDBC的源码剖析
1) Jdbc的Driver接口，如果从桥接模式来看，Driver就是一个接口，下面可以有
MySQL的Driver，Oracle的Driver，这些就可以当做实现接口类
sql:Connection  mySql Connection MysqlConnection ConnnectionImpl
2) 代码分析+Debug源码


脱耦：脱耦就是将抽象化和实现化之间的耦合解脱开，或者说是将它们之间的强关联改换成弱关联，
将两个角色之间的继承关系改为关联关系。桥接模式中的所谓脱耦，就是指在一个软件系统的抽象化和实现化之间使用关联关系（组合或者聚合关系）
而不是继承关系，从而使两者可以相对独立地变化，这就是桥接模式的用意。

桥接模式的注意事项和细节
1) 实现了抽象和实现部分的分离，从而极大的提供了系统的灵活性，让抽象部分和实 现部分独立开来，
这有助于系统进行分层设计，从而产生更好的结构化系统。
2) 对于系统的高层部分，只需要知道抽象部分和实现部分的接口就可以了，其它的部 分由具体业务来完成。
3) 桥接模式"替代多层继承方案"，可以减少子类的个数，降低系统的管理和维护成本。
4) 桥接模式的引入增加了系统的理解和设计难度，由于"""聚合关联关系建立在抽象层"""，
  要求开发者针对抽象进行设计和编程
5) 桥接模式要求正确识别出系统中"两个独立变化的维度"，因此其使用范围有一定的局
  限性，即需要有这样的应用场景。

  桥接模式其它应用场景
  1) 对于那些不希望使用继承或因为多层次继承导致系统类的个数急剧增加的系统，桥 接模式尤为适用.
  2) 常见的应用场景: -JDBC驱动程序
  -银行转账系统
  转账分类: 网上转账，柜台转账，AMT转账（实现类）
  转账用户类型:普通用户，银卡用户，金卡用户.. -消息管理（）抽象类
  消息类型:即时消息，延时消息 （抽象类）
  消息分类:手机短信，邮件消息，QQ消息...（实现类）
