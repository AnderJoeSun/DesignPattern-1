外观模式，又叫过程模式，用于屏蔽子系统的细节
   外观模式可以理解为转换一群接口，客户只 要调用一个接口，而不用调用多个接口才能 达到目的。
代码：比如为完成一个功能，需要调用好几个类里面的方法，这样我们就可以在写一个类（外观类），聚合这几个功能类
    ，在client段，我们只需要调用外观类的方法就行

基本介绍
1) 外观模式(Facade)，也叫“过程模式:外观模式为子系统中的一组接口提供
  一个一致的界面，此模式定义了一个高层接口，这个接口使得这一子系统更加
容易使用
2) 外观模式通过定义一个一致的接口，用以屏蔽内部子系统的细节，使得调用端
  只需跟这个接口发生调用，而无需关心这个子系统的内部细节

原理类图的说明(外观模式的角色)
  1) 外观类(Facade): 为调用端提供统一的调用接口, 外观类知道哪些子系统负责处理请求,从而将调用端的请求代理给适当 子系统对象
  2) 调用者(Client): 外观接口的调用者
  3) 子系统的集合:指模块或者子系统，处理Facade 对象指派的任务，他是功能的实际提供者


外观模式在MyBatis框架应用的源码分析
1) MyBatis 中的Configuration 去创建MetaObject 对象使用到外观模式
2) 代码分析+Debug源码+示意图



外观模式的注意事项和细节
1) 外观模式对外屏蔽了子系统的细节，因此外观模式降低了客户端对子系统使用的复 杂性
2) 外观模式对客户端与子系统的耦合关系，解耦，让子系统内部的模块更易维护和扩展
3) 通过合理的使用外观模式，可以帮我们更好的划分访问的层次
4) 当系统需要进行分层设计时，可以考虑使用Facade模式
5) 在维护一个遗留的大型系统时，可能这个系统已经变得非常难以维护和扩展，此时
可以考虑为新系统开发一个Facade类，来提供遗留系统的比较清晰简单的接口，
让新系统与Facade类交互，提高复用性
6) 不能过多的或者不合理的使用外观模式，使用外观模式好，还是直接调用模块好。
  要以让系统有层次，利于维护为目的。