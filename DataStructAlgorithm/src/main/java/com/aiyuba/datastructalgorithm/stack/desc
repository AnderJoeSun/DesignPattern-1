栈：push pop  两个指针，一个指向栈底一个指向栈顶
    1) 栈的英文为(stack)
    2) 栈是一个先入后出(FILO-FirstInLastOut)的有序列表。
    3) 栈(stack)是限制线性表中元素的插入和删除只能在线性表的同一端进行的一种特殊线性表。允许插入和删除的
    一端，为变化的一端，称为栈顶(Top)，另一端为固定的一端，称为栈底(Bottom)。
    4) 根据栈的定义可知，最先放入栈中元素在栈底，最后放入的元素在栈顶，而删除元素刚好相反，最后放入的元
    素最先删除，最先放入的元素最后删除
    5) 图解方式说明出栈(pop)和入栈(push)的概念。

应用场景：
    1) 子程序的调用:在跳往子程序前，会先将下个指令的地址存到堆栈中，直到子程序执行完后再将地址取出，以 回到原来的程序中。
    2) 处理递归调用:和子程序的调用类似，只是除了储存下一个指令的地址外，也将参数、区域变量等数据存入堆 栈中。
    3) 表达式的转换[中缀表达式转后缀表达式]与求值(实际解决)。
    4) 二叉树的遍历。
    5) 图形的深度优先(depth一first)搜索法。


计算表达式：
    1. 通过一个 index  值（索引），来遍历我们的表达式
    2. 如果我们发现是一个数字, 就直接入数栈
    3. 如果发现扫描到是一个符号,  就分如下情况
    3.1 如果发现当前的符号栈为 空，就直接入栈
    3.2 如果符号栈有操作符，就进行比较,如果当前的操作符的优先级小于或者等于栈中的操作符， 就需要从数栈中pop出两个数,在从符号栈中pop出一个符号，进行运算，将得到结果，入数栈，然后将当前的操作符入符号栈， 如果当前的操作符的优先级大于栈中的操作符， 就直接入符号栈.
    4. 当表达式扫描完毕，就顺序的从 数栈和符号栈中pop出相应的数和符号，并运行.
    5. 最后在数栈只有一个数字，就是表达式的结果


前缀表达式(波兰表达式)
    前缀表达式的计算机求值
    从右至左扫描表达式，遇到数字时，将数字压入堆栈，遇到运算符时，弹出栈顶的两个数，用运算符对它们做相应的计算（栈顶元素 和 次顶元素），
    并将结果入栈；重复上述过程直到表达式最左端，最后运算得出的值即为表达式的结果

后缀表达式的计算机求值。后缀表达式适合计算机计算

    从左至右扫描表达式，遇到数字时，将数字压入堆栈，遇到运算符时，弹出栈顶的两个数，用运算符对它们做相应的计算（次顶元素 和 栈顶元素），
    并将结果入栈；重复上述过程直到表达式最右端，最后运算得出的值即为表达式的结果


前缀表达式又称波兰式，前缀表达式的运算符位于操作数之前
举例说明： (3+4)×5-6 对应的前缀表达式就是 - × + 3 4 5 6

具体步骤如下:
1。初始化两个栈：运算符栈s1和储存中间结果的栈s2；
2。从左至右扫描中缀表达式；
3。遇到操作数时，将其压s2；
4。遇到运算符时，比较其与s1栈顶运算符的优先级：
    如果s1为空，或栈顶运算符为左括号“(”，则直接将此运算符入栈；
    否则，若优先级比栈顶运算符的高，也将运算符压入s1；
    否则，将s1栈顶的运算符弹出并压入到s2中，再次转到(4-1)与s1中新的栈顶运算符相比较；

5。遇到括号时：(1) 如果是左括号“(”，则直接压入s1(2) 如果是右括号“)”，则依次弹出s1栈顶的运算符，并压入s2，直到遇到左括号为止，此时将这一对括号丢弃
6。重复步骤2至5，直到表达式的最右边
7。将s1中剩余的运算符依次弹出并压入s2
8。依次弹出s2中的元素并输出，结果的逆序即为中缀表达式对应的后缀表达式
